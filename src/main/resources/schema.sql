CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID   INT AUTO_INCREMENT PRIMARY KEY,
    EMAIL     VARCHAR(50) NOT NULL,
    LOGIN     VARCHAR(20) NOT NULL,
    USER_NAME VARCHAR(40),
    BIRTHDAY  DATE
);

CREATE TABLE IF NOT EXISTS FRIENDS
(
    USER_ID   INT NOT NULL,
    FRIEND_ID INT NOT NULL,
    PRIMARY KEY (USER_ID, FRIEND_ID),
    CONSTRAINT fk_users_friends
        FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT fk_friend_user
        FOREIGN KEY (FRIEND_ID) REFERENCES USERS (USER_ID)
);

CREATE TABLE IF NOT EXISTS RATINGS
(
    RATING_ID   INT PRIMARY KEY,
    RATING_NAME VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      INT AUTO_INCREMENT PRIMARY KEY,
    FILM_NAME    VARCHAR(100) NOT NULL,
    DESCRIPTION  VARCHAR(200),
    RELEASE_DATE DATE,
    DURATION     SMALLINT,
    RATING_ID    INT,
    CONSTRAINT fk_films_ratings
        FOREIGN KEY (RATING_ID) REFERENCES RATINGS (RATING_ID)
);

CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT fk_users_likes
        FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT fk_films_likes
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID)
);

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INT PRIMARY KEY,
    GENRE_NAME VARCHAR(50)
);

CREATE TABLE IF NOT EXISTS FILM_GENRES
(
    FILM_ID  INT NOT NULL,
    GENRE_ID INT NOT NULL,
    PRIMARY KEY (FILM_ID, GENRE_ID),
    CONSTRAINT fk_genres_film_genres
        FOREIGN KEY (GENRE_ID) REFERENCES GENRES (GENRE_ID),
    CONSTRAINT fk_films_film_genres
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID)
);